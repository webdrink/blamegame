name: 🚀 Deploy Blame Game to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_reason:
        description: 'Reason for manual deployment'
        required: false
        default: 'Manual deployment'

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  pre-deploy-checks:
    name: 🔍 Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      needs-translation: ${{ steps.translation-check.outputs.needs-translation }}
      
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Check Translation Status
        id: translation-check
        run: |
          echo "🔍 Checking if translations are needed..."
          if [ -f "scripts/auto-translate.js" ]; then
            # Check if there are missing translations
            node scripts/auto-translate.js --check-only || echo "needs-translation=true" >> $GITHUB_OUTPUT
          else
            echo "needs-translation=false" >> $GITHUB_OUTPUT
          fi

  build-and-deploy:
    name: 🏗️ Build and Deploy
    runs-on: ubuntu-latest
    needs: pre-deploy-checks
    environment:
      name: github-pages
      url: https://blamegame.leagueoffun.de
    
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'

      - name: 📥 Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔢 Update Version
        run: |
          echo "🔢 Managing version information..."
          pnpm run version:update
          
          # Output version for other steps
          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "📊 Updated to version: $VERSION"

      - name: 🌐 Auto-translate if needed
        if: needs.pre-deploy-checks.outputs.needs-translation == 'true'
        run: |
          echo "🔄 Running translation system..."
          pnpm run translate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        continue-on-error: true

      - name: 🛠️ Build Project
        run: |
          echo "🏗️ Building project..."
          pnpm run build:domain

      - name: 🔧 Ensure GitHub Pages Compatibility
        run: |
          echo "🔧 Ensuring GitHub Pages compatibility..."
          
          # Ensure .nojekyll file exists to disable Jekyll processing
          if [ ! -f "./dist/.nojekyll" ]; then
            echo "📝 Adding .nojekyll file to disable Jekyll processing"
            touch ./dist/.nojekyll
          fi
          
          # Verify essential JSON files are present
          echo "🔍 Verifying JSON files are included in build..."
          if [ -f "./dist/questions/categories.json" ]; then
            echo "✅ categories.json found"
          else
            echo "❌ categories.json missing - this will cause loading issues!"
            exit 1
          fi
          
          if [ -d "./dist/questions/de" ]; then
            question_count=$(find ./dist/questions/de -name "*.json" | wc -l)
            echo "✅ German questions found: $question_count files"
          else
            echo "❌ German questions directory missing!"
            exit 1
          fi
          
          # List all files for debugging
          echo "📁 Build directory contents:"
          find ./dist -type f | head -20

      - name: ⚙️ Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: ⬆️ Upload Build Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000  # 10 minutes timeout

      - name: ✅ Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          
          # Wait for propagation
          sleep 30
          
          # Check if main site is accessible
          if curl -f -s --max-time 30 "https://blamegame.leagueoffun.de/" > /dev/null; then
            echo "✅ Site is accessible!"
            
            # Wait a bit more and check JSON files
            sleep 30
            if curl -f -s --max-time 30 "https://blamegame.leagueoffun.de/questions/categories.json" > /dev/null; then
              echo "✅ JSON files are accessible!"
              echo "🌐 Deployment fully verified at: https://blamegame.leagueoffun.de/"
            else
              echo "⚠️ JSON files not yet accessible, but main site is up"
              echo "This might be due to CDN propagation delay"
            fi
            
            # Verify deployed version matches expected version
            sleep 15
            echo "🔍 Checking deployed version..."
            if curl -f -s --max-time 30 "https://blamegame.leagueoffun.de/version.json" > /tmp/deployed_version.json; then
              DEPLOYED_VERSION=$(cat /tmp/deployed_version.json | jq -r '.version')
              EXPECTED_VERSION="${{ env.VERSION }}"
              
              echo "📊 Expected version: $EXPECTED_VERSION"
              echo "📊 Deployed version: $DEPLOYED_VERSION"
              
              if [ "$DEPLOYED_VERSION" = "$EXPECTED_VERSION" ]; then
                echo "✅ Version verification successful!"
                echo "DEPLOYMENT_VERSION_VERIFIED=true" >> $GITHUB_ENV
              else
                echo "⚠️ Version mismatch detected!"
                echo "Expected: $EXPECTED_VERSION, Deployed: $DEPLOYED_VERSION"
                echo "DEPLOYMENT_VERSION_VERIFIED=false" >> $GITHUB_ENV
              fi
            else
              echo "⚠️ Could not fetch version.json from deployed site"
              echo "DEPLOYMENT_VERSION_VERIFIED=unknown" >> $GITHUB_ENV
            fi
          else
            echo "⚠️ Site not immediately accessible, this might be normal"
            echo "CDN propagation can take a few minutes"
            echo "DEPLOYMENT_VERSION_VERIFIED=unknown" >> $GITHUB_ENV
          fi

      - name: 📊 Deployment Report
        if: always()
        run: |
          echo "## 🚀 Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🔢 **Version**: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏗️ **Build Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 **Deployment**: ${{ steps.deployment.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Version Verification**: ${{ env.DEPLOYMENT_VERSION_VERIFIED }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **Site URL**: https://blamegame.leagueoffun.de/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Deployment completed using simplified GitHub Pages action with version verification._" >> $GITHUB_STEP_SUMMARY
          
          # Show how to verify deployment manually
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Manual Verification Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# Verify deployment status" >> $GITHUB_STEP_SUMMARY
          echo "pnpm run deploy:verify" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Check version directly" >> $GITHUB_STEP_SUMMARY
          echo "curl https://blamegame.leagueoffun.de/version.json" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
