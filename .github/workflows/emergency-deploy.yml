name: üÜò Emergency Fallback Deployment

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for emergency deployment'
        required: true
        default: 'Main workflow failed'
  
  # Disabled automatic trigger to prevent deployment loops
  # workflow_run:
  #   workflows: ["üöÄ Deploy Blame Game to GitHub Pages"]
  #   types:
  #     - completed
  #   branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  emergency-deploy:
    name: üÜò Emergency Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch' }}
    environment:
      name: github-pages
      url: https://blamegame.leagueoffun.de
    
    steps:
      - name: ‚¨áÔ∏è Emergency Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: üì¶ Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: ‚öôÔ∏è Minimal Dependency Install
        run: |
          echo "üö® Emergency mode: Installing only essential dependencies..."
          pnpm install --prod --no-frozen-lockfile || {
            echo "‚ö†Ô∏è Production install failed, trying full install..."
            rm -rf node_modules
            pnpm install --no-frozen-lockfile
          }

      - name: üèóÔ∏è Emergency Build
        run: |
          echo "üö® Emergency build with multiple strategies..."
          
          # Set emergency environment
          export NODE_ENV=production
          export VITE_BASE_PATH=/
          
          # Strategy 1: Try standard build
          if pnpm run build:domain; then
            echo "‚úÖ Standard build succeeded"
          elif pnpm run build; then
            echo "‚úÖ Fallback build succeeded"
            # Ensure CNAME file exists for custom domain
            echo "blamegame.leagueoffun.de" > dist/CNAME
          else
            echo "‚ùå All build strategies failed, creating minimal static site..."
            
            # Last resort: create minimal static site with error page
            mkdir -p dist
            cat > dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>BlameGame - Service Recovery</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <meta http-equiv="refresh" content="300">
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
              .container { max-width: 600px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 40px; border-radius: 15px; backdrop-filter: blur(10px); box-shadow: 0 8px 32px rgba(0,0,0,0.3); }
              h1 { color: #fff; margin-bottom: 20px; }
              .status { background: rgba(255,193,7,0.2); border: 2px solid #ffc107; color: #fff; padding: 20px; border-radius: 10px; margin: 20px 0; }
              .retry-btn { background: #28a745; color: white; padding: 15px 30px; border: none; border-radius: 8px; font-size: 16px; cursor: pointer; margin: 20px 10px; text-decoration: none; display: inline-block; }
              .retry-btn:hover { background: #218838; }
              .timestamp { font-size: 12px; opacity: 0.8; margin-top: 20px; }
              .spinner { border: 3px solid rgba(255,255,255,0.3); border-top: 3px solid #fff; border-radius: 50%; width: 30px; height: 30px; animation: spin 1s linear infinite; margin: 20px auto; }
              @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>üéÆ BlameGame</h1>
              <div class="spinner"></div>
              <div class="status">
                <strong>üîß Service Recovery in Progress</strong><br><br>
                We're experiencing technical difficulties with our deployment system.<br>
                Our automatic recovery system is actively working to restore service.
              </div>
              <p>üöÄ <strong>Emergency deployment system activated</strong></p>
              <p>‚è±Ô∏è This page will automatically refresh every 5 minutes</p>
              <p>üîÑ Normal service will be restored automatically</p>
              
              <a href="/" class="retry-btn">üîÑ Retry Now</a>
              <a href="https://github.com/webdrink/blamegame" class="retry-btn">üìß Report Issue</a>
              
              <div class="timestamp">
                <em>Emergency deployment: <script>document.write(new Date().toLocaleString())</script></em><br>
                <em>System Status: Automatic Recovery Active</em>
              </div>
            </div>
            
            <script>
              // Auto-retry mechanism
              let retryCount = 0;
              const maxRetries = 10;
              
              function checkService() {
                retryCount++;
                if (retryCount <= maxRetries) {
                  console.log('Checking service status...', retryCount);
                  // Try to fetch a small asset to test if main site is back
                  fetch('/favicon.svg', { method: 'HEAD' })
                    .then(response => {
                      if (response.ok) {
                        window.location.reload();
                      }
                    })
                    .catch(() => {
                      // Service still down, will retry on next interval
                    });
                }
              }
              
              // Check every 30 seconds
              setInterval(checkService, 30000);
              
              // Initial check after 10 seconds
              setTimeout(checkService, 10000);
            </script>
          </body>
          </html>
          EOF
            echo "blamegame.leagueoffun.de" > dist/CNAME
            echo "üÜò Created intelligent emergency maintenance page with auto-recovery"
          fi

      - name: üîç Verify Emergency Build
        run: |
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "‚ùå Emergency build verification failed"
            exit 1
          fi
          
          echo "‚úÖ Emergency build verified"
          echo "üìÅ Build contents:"
          ls -la dist/

      - name: ‚öôÔ∏è Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: üöÄ Smart Emergency Deploy
        id: smart-deploy
        run: |
          echo "üö® Starting intelligent emergency deployment..."
          
          # Check GitHub Pages service status first
          check_github_pages_status() {
            echo "üîç Checking GitHub Pages service status..."
            
            # Check GitHub status API
            if curl -s --max-time 10 "https://www.githubstatus.com/api/v2/components.json" | grep -q '"name":"Pages".*"status":"operational"'; then
              echo "‚úÖ GitHub Pages reports operational status"
              return 0
            else
              echo "‚ö†Ô∏è GitHub Pages may be experiencing issues"
              return 1
            fi
          }
          
          # Strategy 1: Try GitHub Pages if service is healthy
          if check_github_pages_status; then
            echo "üì§ Attempting GitHub Pages deployment (service appears healthy)..."
            
            # Upload artifact with timeout
            if timeout 300 curl -X POST \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/$GITHUB_REPOSITORY/pages/builds" \
               -d '{}'; then
              
              echo "‚úÖ GitHub Pages deployment initiated"
              
              # Wait reasonable time and verify
              sleep 120
              
              if curl -f -s --max-time 30 "https://blamegame.leagueoffun.de/" > /dev/null; then
                echo "‚úÖ GitHub Pages deployment successful!"
                echo "deployment_method=github-pages" >> $GITHUB_OUTPUT
                echo "deployment_success=true" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi
            
            echo "‚ö†Ô∏è GitHub Pages deployment failed despite healthy status"
          fi
          
          # Strategy 2: Try the upload-pages-artifact approach
          echo "üîÑ Attempting artifact-based deployment..."
          
          if timeout 600 bash -c '
            echo "üì§ Uploading pages artifact..."
            
            # Create artifact manually
            cd dist
            tar --dereference --hard-dereference --directory . -czf ../pages.tar.gz .
            cd ..
            
            # Upload using GitHub API
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/assets" \
              --data-binary @pages.tar.gz \
              -H "Content-Type: application/gzip"
          '; then
            echo "‚úÖ Artifact uploaded successfully"
            sleep 60
            
            if curl -f -s --max-time 30 "https://blamegame.leagueoffun.de/" > /dev/null; then
              echo "‚úÖ Artifact deployment successful!"
              echo "deployment_method=artifact-upload" >> $GITHUB_OUTPUT
              echo "deployment_success=true" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # Strategy 3: Force rebuild via repository dispatch
          echo "üÜò Attempting force rebuild trigger..."
          
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/$GITHUB_REPOSITORY/dispatches" \
            -d '{"event_type":"emergency-rebuild","client_payload":{"source":"emergency-deploy","timestamp":"'$(date -Iseconds)'"}}' || true
          
          sleep 30
          
          # Strategy 4: Last resort - use standard action with minimal timeout
          echo "üîÑ Final attempt with standard deployment action..."
          echo "deployment_method=last-resort" >> $GITHUB_OUTPUT
          echo "deployment_success=false" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: ‚¨ÜÔ∏è Upload Emergency Build
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: üöÄ Final Emergency Deploy
        if: steps.smart-deploy.outputs.deployment_success != 'true'
        uses: actions/deploy-pages@v4
        continue-on-error: true

      - name: ‚úÖ Verify Emergency Deployment
        run: |
          echo "üîç Verifying emergency deployment..."
          
          # Extended verification with multiple checks
          for attempt in {1..10}; do
            echo "üîç Verification attempt $attempt/10..."
            
            # Try multiple endpoints
            if curl -f -s --max-time 30 "https://blamegame.leagueoffun.de/" > /dev/null ||
               curl -f -s --max-time 30 "https://blamegame.leagueoffun.de/index.html" > /dev/null; then
              
              echo "‚úÖ Emergency deployment verified!"
              echo "üåê Site accessible at: https://blamegame.leagueoffun.de/"
              echo "EMERGENCY_DEPLOY_SUCCESS=true" >> $GITHUB_ENV
              break
            else
              echo "‚ö†Ô∏è Site not accessible yet (attempt $attempt), waiting..."
              
              if [ $attempt -le 8 ]; then
                sleep 45
              else
                echo "‚ùå Emergency deployment verification failed"
                echo "üÜò Site may not be accessible"
                echo "EMERGENCY_DEPLOY_SUCCESS=false" >> $GITHUB_ENV
              fi
            fi
          done

      - name: üì¢ Create Issue for Failed Deployment
        if: github.event.workflow_run.conclusion == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Main Deployment Workflow Failed - Emergency Deployment Activated',
              body: `## üÜò Emergency Deployment Report
              
              The main deployment workflow failed and emergency deployment was automatically triggered.
              
              **Failure Details:**
              - **Workflow Run:** ${{ github.event.workflow_run.html_url }}
              - **Conclusion:** ${{ github.event.workflow_run.conclusion }}
              - **Emergency Deployment:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              - **Time:** ${new Date().toISOString()}
              
              **Current Status:**
              - ‚úÖ Emergency deployment completed
              - üåê Site accessible at: https://blamegame.leagueoffun.de/
              - ‚ö†Ô∏è May be running in maintenance mode
              
              **Next Steps:**
              1. Investigate the main workflow failure
              2. Fix underlying issues
              3. Trigger a new deployment
              4. Close this issue once resolved
              
              **Auto-created by Emergency Fallback Deployment workflow**`,
              labels: ['bug', 'deployment', 'emergency']
            });
            
            console.log(`Created issue #${issue.data.number}`);

      - name: üìä Emergency Report
        if: always()
        run: |
          echo "## üÜò Emergency Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "**Reason:** Main workflow failed" >> $GITHUB_STEP_SUMMARY
            echo "**Failed Run:** ${{ github.event.workflow_run.html_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Site:** https://blamegame.leagueoffun.de/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Emergency deployment ensures site availability during main workflow issues._" >> $GITHUB_STEP_SUMMARY
