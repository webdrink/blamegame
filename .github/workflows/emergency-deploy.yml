name: 🆘 Emergency Fallback Deployment

on:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for emergency deployment'
        required: true
        default: 'Main workflow failed'
  
  # Automatically trigger if main workflow fails
  workflow_run:
    workflows: ["🚀 Deploy Blame Game to GitHub Pages"]
    types:
      - completed
    branches: [main]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  emergency-deploy:
    name: 🆘 Emergency Deployment
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' || github.event_name == 'workflow_dispatch' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: ⬇️ Emergency Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 1

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: ⚙️ Minimal Dependency Install
        run: |
          echo "🚨 Emergency mode: Installing only essential dependencies..."
          pnpm install --prod --no-frozen-lockfile || {
            echo "⚠️ Production install failed, trying full install..."
            rm -rf node_modules
            pnpm install --no-frozen-lockfile
          }

      - name: 🏗️ Emergency Build
        run: |
          echo "🚨 Emergency build with minimal configuration..."
          
          # Set emergency environment
          export NODE_ENV=production
          export VITE_BASE_PATH=/
          
          # Try different build strategies
          if pnpm run build:domain; then
            echo "✅ Standard build succeeded"
          elif pnpm run build; then
            echo "✅ Fallback build succeeded"
            # Ensure CNAME file exists for custom domain
            echo "blamegame.leagueoffun.de" > dist/CNAME
          else
            echo "❌ All build strategies failed"
            
            # Last resort: create minimal static site
            mkdir -p dist
            cat > dist/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>BlameGame - Maintenance</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: #f0f0f0; }
              .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
              h1 { color: #333; }
              p { color: #666; line-height: 1.6; }
              .status { background: #fff3cd; border: 1px solid #ffeaa7; color: #856404; padding: 15px; border-radius: 5px; margin: 20px 0; }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>🔧 BlameGame Maintenance</h1>
              <div class="status">
                <strong>Temporary Maintenance Mode</strong><br>
                We're experiencing technical difficulties and are working to restore full functionality.
              </div>
              <p>Our emergency deployment system has activated to ensure the site remains accessible.</p>
              <p>Normal service will be restored shortly. Thank you for your patience!</p>
              <p><em>Emergency deployment triggered: $(date)</em></p>
            </div>
          </body>
          </html>
          EOF
            echo "blamegame.leagueoffun.de" > dist/CNAME
            echo "🆘 Created emergency maintenance page"
          fi

      - name: 🔍 Verify Emergency Build
        run: |
          if [ ! -d "dist" ] || [ ! -f "dist/index.html" ]; then
            echo "❌ Emergency build verification failed"
            exit 1
          fi
          
          echo "✅ Emergency build verified"
          echo "📁 Build contents:"
          ls -la dist/

      - name: ⚙️ Configure GitHub Pages
        uses: actions/configure-pages@v5

      - name: ⬆️ Upload Emergency Build
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: 🚀 Emergency Deploy
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 📢 Create Issue for Failed Deployment
        if: github.event.workflow_run.conclusion == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Main Deployment Workflow Failed - Emergency Deployment Activated',
              body: `## 🆘 Emergency Deployment Report
              
              The main deployment workflow failed and emergency deployment was automatically triggered.
              
              **Failure Details:**
              - **Workflow Run:** ${{ github.event.workflow_run.html_url }}
              - **Conclusion:** ${{ github.event.workflow_run.conclusion }}
              - **Emergency Deployment:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              - **Time:** ${new Date().toISOString()}
              
              **Current Status:**
              - ✅ Emergency deployment completed
              - 🌐 Site accessible at: https://blamegame.leagueoffun.de/
              - ⚠️ May be running in maintenance mode
              
              **Next Steps:**
              1. Investigate the main workflow failure
              2. Fix underlying issues
              3. Trigger a new deployment
              4. Close this issue once resolved
              
              **Auto-created by Emergency Fallback Deployment workflow**`,
              labels: ['bug', 'deployment', 'emergency']
            });
            
            console.log(`Created issue #${issue.data.number}`);

      - name: 📊 Emergency Report
        if: always()
        run: |
          echo "## 🆘 Emergency Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "**Reason:** Main workflow failed" >> $GITHUB_STEP_SUMMARY
            echo "**Failed Run:** ${{ github.event.workflow_run.html_url }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Site:** https://blamegame.leagueoffun.de/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "_Emergency deployment ensures site availability during main workflow issues._" >> $GITHUB_STEP_SUMMARY
